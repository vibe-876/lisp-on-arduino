:PROPERTIES:
:header-args: :session lisp-on-arduino :tangle lisp-on-arduino.ino
:END:
#+title: Main File
#+author: Camilla A.


* Atoms
We start with atomic variables.
These are the things that we construct our lists out of -- it can just be either data, or nil.
Support for literals will be added at a later date.
#+begin_src cpp
  enum atom_enum {
  	nil,
  	number,
  	literal
  };
#+end_src

Next, we use this to define an atom as a struct.
#+begin_src arduino
  typedef struct atom_struct {
  	signed int data;
  	enum atom_enum atom_type;
  } atom;

  #define ATOM_SIZE sizeof(atom)
#+end_src

And now, a function to initialise and write something to it, and a function to create a nil value.
#+begin_src arduino
  atom *atom_nil() {
  	atom *new_atom = malloc(ATOM_SIZE);
  	new_atom->atom_type = nil;
  	
  	return(new_atom);
  }

  atom *atom_new(signed int data) {
  	atom *atom = malloc(ATOM_SIZE);
  	atom->atom_type = data;
  	atom->data = data;
  	
  	return(atom);
  }
#+end_src
* Cons
Cons cells are another easy thing to implement.
#+begin_src arduino
    typedef struct cons_struct {
    	atom *car;
    	struct cons_struct *cdr;
    } cons;

    #define CONS_SIZE sizeof(cons)
#+end_src

We then implement ~car~ and ~cdr~.
#+begin_src arduino
  atom *car(struct cons_struct *list) {
  	return(list->car);
  }

  cons *cdr(cons *list) {
  	return(list->cdr);
  }
#+end_src

Next, we need a ~pair~ procedure, to make cons cells.
#+begin_src arduino
  cons *pair(int data_one, int data_two) {
  	atom *atom_one = atom_new(data_one);
  	atom *atom_two = atom_new(data_two);

  	cons *cons;
  	return(cons);
  }
#+end_src

And we want an append function, so that we can add to our lists.
#+begin_src arduino
  cons *append(cons *list, unsigned int data) {
  	cons *last_elem = list;
  	while(last_elem != 0x0) last_elem = last_elem->cdr;

  	last_elem = malloc(CONS_SIZE);
  	last_elem->car = atom_new(data);
  	last_elem->cdr = atom_nil();

  	return(0x0);
  }
#+end_src
* REPL
Just here so that we can compile (for now).
#+begin_src arduino
  void setup() {
  	Serial.begin(9600);
  }
#+end_src

Here is where the REPL lives.
#+begin_src arduino
  void loop() {
  	Serial.print("REPL> ");
  }
#+end_src
